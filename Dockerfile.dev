# Development Dockerfile for Music Anomalizer
# Optimized for immediate reflection of local changes during development

FROM pytorch/pytorch:2.7.0-cuda11.8-cudnn9-runtime

# Set the working directory in the container
WORKDIR /usr/src/app

# Set environment variables for development
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONPATH=/usr/src/app

# Install system dependencies including Node.js for Claude CLI
RUN apt-get update && apt-get install -y \
    libsndfile1 fluidsynth curl git tmux \
    && curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Update to the latest version and install Claude
RUN npm install -g npm@latest
# Had issue (Oauth authentication...) with 1.0.85 version and downgrading worked
RUN npm install -g @anthropic-ai/claude-code@1.0.81

# Install Python dependencies first (for better caching)
# Copy only package configuration files initially
COPY pyproject.toml .
COPY README.md .
COPY LICENSE .

# Install base dependencies without the package itself
# This allows for faster rebuilds when only source code changes
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install dependencies from pyproject.toml without installing the package
RUN pip install --no-cache-dir torch torchvision torchaudio \
    librosa numpy pandas matplotlib seaborn \
    scikit-learn scipy ipykernel notebook streamlit \
    plotly tqdm pydantic

# Install additional development tools
RUN pip install --no-cache-dir jupyter jupyterlab ipywidgets

# Add Tini for better signal handling in Jupyter
ENV TINI_VERSION v0.6.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

# Create a startup script that installs the package in development mode
# This ensures the package is always up-to-date with local changes
RUN echo '#!/bin/bash\n\
echo "Installing music_anomalizer package in development mode..."\n\
pip install -e ".[dev]" --quiet\n\
echo "Package installed successfully!"\n\
exec "$@"' > /usr/local/bin/dev-entrypoint.sh && \
    chmod +x /usr/local/bin/dev-entrypoint.sh

# Expose ports for Jupyter and Streamlit
EXPOSE 8081 8501

# Use Tini as the container's entry point with our dev script
ENTRYPOINT ["/usr/bin/tini", "--", "/usr/local/bin/dev-entrypoint.sh"]

# Default command starts Jupyter
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--port=8081", "--no-browser", "--allow-root", "--NotebookApp.token=''", "--NotebookApp.password=''", "--NotebookApp.allow_origin='*'"]